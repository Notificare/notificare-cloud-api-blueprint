FORMAT: 1A
HOST: https://cloud.notifica.re/api

# Notificare CLOUD API
This is an official Notificare API that enables access to certain features of our platform specially for your mobile and web apps. Its sole purpose is to provide access to REST API endpoints without having to build this integration through your back-end and instead use it from your front-end application.
The API calls below are all authenticated with `applicationKey` and `applicationSecret`, if you do not have these yet, you should grab them from your app in Notificare Dashboard under the section Settings > App Keys.
Use Basic HTTP Authentication where `applicationKey` should be your username and `applicationSecret` your password. If you intend to use this API from your mobile application, you can access all the endpoints provided here through the Cloud API method available in our SDKs.

To activate or get more information about this API, please [contact us](http://notifica.re/contact).


## Application [/application/info]

### Retrieve information about the application [GET]

+ Response 200 (application/json)

    {
        "application": {
            "_id": "xxx",
            "name": "Notificare App",
            "category": "Business",
            "appStoreId": null,
            "androidPackageName": null,
            "services": {
                "richPush": true,
                "locationServices": true,
                "apns": true,
                "gcm": true,
                "websockets": true,
                "triggers": true,
                "passbook": true,
                "inAppPurchase": true,
                "oauth2": true,
                "screens": true,
                "reports": true,
                "appsOnDemand": true,
                "liveApi": true,
                "automation": true,
                "websitePush": true,
                "inbox": true,
                "storage": true
            },
            "inboxConfig": {
                "useInbox": true,
                "autoBadge": true
            },
            "userDataFields": [],
            "actionCategories": [],
            "regionConfig": {
                "proximityUUID": null
            },
            "websitePushConfig": {
                "icon": "/website-push/xxx/xxx",
                "allowedDomains": ["http://mydomain.com"],
                "urlFormatString": "http://mydomain.com/?notification=%@",
                "info": {
                    "subject": {
                        "C": "US",
                        "O": "Notificare B.V.",
                        "OU": "xxxx",
                        "CN": "Website Push ID: web.com.mydomain",
                        "UID": "web.com.mydomain"
                    }
                }
            }
        }
    }


## Assets [/asset/forgroup/{name}]
### Retrieve a group of assets by name [GET]

+ Parameters

    + name (required, string, `MY_GROUP_NAME`)...The name of the asset group.


+ Response 200 (application/json)

        {
            "assets": [{
                "title": "My Asset Group",
                "key": "xxx/xxx",
                "description": "",
                "_id": "xxx",
                "button": {
                    "label": null,
                    "action": null
                },
                "metaData": {
                    "contentLength": 501,
                    "contentType": "application/json",
                    "originalFileName": "myjsonfile.json"
                }
            }]
        }

## Beacons [/beacon/forregion/{region}]
### Get all beacons for a certain region [GET]

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "beacons":[{
                                   "_id":"xxx",
                                   "notification":"xxx",
                                   "name": "My 1st Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        },
        {
                                   "_id":"xxx",
                                   "notification":"xxx",
                                   "name": "My 2nd Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        }]

## Beacon [/beacon/forregion/{region}/{minor}]
### Get all beacons for a certain region [GET]

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active region.
    + minor (required, string, `123456`)...The minor of a beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "beacon":{
                                   "_id":"xxx",
                                   "notification":"xxx",
                                   "name": "My 1st Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
                }
        }

## Device Registration [/device]
### Register a device [POST]

+ Parameters

    + appVersion (required, string, `1.0`)...The version of your application.
    + deviceID (required, string, `APA91bEpai_9PbfvVie3xvVnM2VXZEjQ1ZZIFiRzXf`)...The unique identifier for your device corresponding to the APNS, FCM or Webpush token.
    + deviceString (required, string, `MacIntel`)...An identifier of the device's model.
    + language (required, string, `en-GB`)...An ISO 639-1 language code that identifies the language in the device.
    + oldDeviceID (optional, string, `APA91bEpai_9PbfvVie3xvVnM2VXZEjQ1ZZIFiRzXf`)...The old device identifier in case a new one is assigned, this makes sure data in the old device transits to the new one.
    + osVersion (required, string, `10.12.3`)...The operating system version of the device.
    + platform (required, string, `Chrome`)...An object containing three previously created message Ids for each proximity level.
    + sdkVersion (required, number, `1.9.0`)...The version of the SDK used. This allows the platform to understand what functionalities are available.
    + timeZoneOffset (required, number, `1`)...The timezone offset of the device.
    + transport (required, string, `GCM`)...The identifier of the push channel allowed in the device.
    + userID (optional, string, `1234567890`)...The unique identifier that you can use to send messages to this device.
    + userName (optional, string, `John Doe`)...A name for the user of the device.


+ Request (application/json)

        {
            "appVersion": "1.0"
            "deviceID": "xxxxx"
            "deviceString": "MacIntel"
            "language": "en-GB"
            "oldDeviceID": null
            "osVersion": "10.12.3"
            "platform": "Chrome"
            "sdkVersion": "1.9.3"
            "timeZoneOffset": 1
            "transport": "GCM"
            "userID": null
            "userName": null
        }

+ Response 200 (application/json; charset=utf-8)

        {
            "device": {
                "message": "device updated"
            }
        }

## Device Tags [/device/{deviceID}/tags]
### Get all the tags for a device [GET]

+ Parameters

    + deviceID (required, string, `APA91bEpai_9PbfvVie3xvVnM2VXZEjQ1ZZIFiRzXf`)...The unique identifier for your device corresponding to the APNS, FCM or Webpush token.

+ Response 200 (application/json; charset=utf-8)

        {
                "tags":[
                       "one_tag",
                       "two_tags"
                ]
        }

## Event [/event]
### Register an event [POST]

## Event Types:
| type | description |
|:---------:|----------------------------------|
| re.notifica.event.application.Install | Stored whenever a new device installs the app. |
| re.notifica.event.application.Uninstall | Stored whenever an app was removed from the device, as reported by APNS or GCM feedback. |
| re.notifica.event.application.Open | Stored whenever the application becomes active. |
| re.notifica.event.application.Close | Stored whenever the application goes to background. |
| re.notifica.event.notification.Influenced | Stored whenever a notification when app is not active. |
| re.notifica.event.notification.Receive | Stored whenever a notification arrives. |
| re.notifica.event.notification.Open | Stored whenever a notification is open. |
| re.notifica.event.region.Session | Stored whenever a user enters and leaves a region. |
| re.notifica.event.beacon.Session | Stored whenever a user is on the proximity of a beacon. |
| re.notifica.event.pass.Add | Stored whenever a pass is added to a device's wallet. |
| re.notifica.event.pass.Remove | Stored whenever a pass is removed from a device's wallet. |
| re.notifica.event.pass.Redeem | Stored whenever a pass is redeemed. |
| re.notifica.event.product.Buy | Stored whenever a purchase is done. |
| re.notifica.event.product.Buy.{store} | Stored whenever a purchase is done, where store is AppStore or GooglePlay. |
| re.notifica.event.product.Buy.{store}.{identifier} | Stored whenever a purchase is done, where store is AppStore or GooglePlay. |
| re.notifica.event.custom.{name} | Any other event stored by your application. |


+ Parameters

    + sessionID (required, string, `1627576d6d6d66d676627`)...The session identifier that allows to cross reference events.
    + deviceID (required, string, `APA91bEpai_9PbfvVie3xvVnM2VXZEjQ1ZZIFiRzXf`)...The unique identifier for your device corresponding to the APNS, FCM or Webpush token.
    + userID (optional, string, `1234567890`)...The unique identifier that you can use to send messages to this device.
    + type (required, string, `re.notifica.event.application.Open`)...A reverse domain style namespace that identifies the type of event.
    + notification (optional, string, `1627576d6d6d66d676627`)...The notification identifier when applicable.
    + data (optional, object, `{"campaignID":"12526dd66d666d66772d"}`)...A free form object that allows you to store any type of data for an event.


+ Request (application/json)

        {
            "sessionID": "1.0"
            "deviceID": "xxxxx"
            "type": "re.notifica.event.application.Open"
            "notification": null
            "data": null
            "userID": null
        }

+ Response 202 (application/json; charset=utf-8)

        {

        }